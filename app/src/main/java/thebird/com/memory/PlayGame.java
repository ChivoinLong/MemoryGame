package thebird.com.memory;import android.app.Activity;import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.os.Handler;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import java.util.Random;public class PlayGame extends Activity {    Typeface typeface = MainActivity.typeface;    final int CLOSED = 0;    final int OPENED = 1;    final int MATCHED = 2;    int[] animalImg;    SurfaceHolder holder;    Canvas canvas;    Paint p = new Paint();    Handler handler = new Handler();    static Context mContext;    Drawable drawable;    Card[] myCard;    static int level = 0;    static int round = 0;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(new PlayGameView(this));    }    protected class PlayGameView extends SurfaceView {        int nRow, nCol, scrW, scrH, rectW, rectH;        int previous, tries, isMatched;        int cardMargin = 10;        int tdMargin;        public PlayGameView(final Context context){            super(context);            PlayGame.mContext = context;            previous = -1;            tries = isMatched = 0;            switch (level){                case 0:                    nCol = 3; nRow = 4;                    break;                case 1:                    nCol = 4; nRow = 5;                    break;                case 2:                    nCol = 5; nRow = 6;                    break;            }            holder = getHolder();            holder.addCallback(new SurfaceHolder.Callback() {                @Override                public void surfaceCreated(SurfaceHolder holder) {                    new Handler().post(new Runnable() {                        @Override                        public void run() {                            animalImg = new int[]{                                    R.drawable.bear, R.drawable.bee, R.drawable.bird,                                    R.drawable.bunny, R.drawable.cat, R.drawable.cow,                                    R.drawable.crocodile, R.drawable.dog, R.drawable.donkey,                                    R.drawable.dragon, R.drawable.duck, R.drawable.elephant,                                    R.drawable.fish, R.drawable.frog, R.drawable.giraffe,                                    R.drawable.hippo, R.drawable.horse, R.drawable.koala,                                    R.drawable.lion, R.drawable.minion, R.drawable.monkey,                                    R.drawable.mouse, R.drawable.octopus, R.drawable.owl,                                    R.drawable.panda, R.drawable.penguin, R.drawable.pig,                                    R.drawable.rooster, R.drawable.sheep, R.drawable.snake,                                    R.drawable.tiger, R.drawable.turtle, R.drawable.zebra        //22 Pictures                            };                            initCard();                        }                    });                }                @Override                public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {}                @Override                public void surfaceDestroyed(SurfaceHolder holder) { }            });        }        protected void initCard(){            Random r = new Random();            for (int i = 0; i < 50; i++) { // randomize the images                int rnum = r.nextInt(animalImg.length);                int tmp = animalImg[0];                animalImg[0] = animalImg[rnum];                animalImg[rnum] = tmp;            }            myCard = new Card[nCol*nRow];            for (int i = 0, j = 0; i < myCard.length; i++, j++) {    //Initialise cards                myCard[i++] = new Card(animalImg[j], CLOSED);                myCard[i] = new Card(animalImg[j], CLOSED);            }            for (int i = 0; i < myCard.length; i++) {       //Random myCard                int rNum = r.nextInt(myCard.length);                Card tmpCard = myCard[0];                myCard[0] = myCard[rNum];                myCard[rNum] = tmpCard;            }            openAll();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    closeAll();                }            }, 3000);        }        protected void repaint(){            canvas = holder.lockCanvas();            myDraw(canvas);            p.setColor(Color.WHITE);            p.setTextSize(180);            p.setTextAlign(Paint.Align.CENTER);            p.setTypeface(typeface);            canvas.drawText("MEMORY", scrW/2, scrH*12/100, p);            holder.unlockCanvasAndPost(canvas);        }        protected void openAll(){            for (Card aMyCard : myCard) {                aMyCard._state = OPENED;            }            repaint();        }        protected void closeAll(){            for (Card aMyCard : myCard) {                aMyCard._state = CLOSED;            }            repaint();        }        protected void myDraw(Canvas canvas) {            scrW = canvas.getWidth();            scrH = canvas.getHeight();            rectW = scrW/nCol;            rectH = (int)(scrH*0.7)/nRow;            tdMargin = scrH*15/100;            canvas.drawColor(Color.BLACK);//background            p.setColor(Color.WHITE);            p.setTextSize(80);            p.setStyle(Paint.Style.FILL_AND_STROKE);            p.setTextAlign(Paint.Align.CENTER);            p.setTypeface(Typeface.create(Typeface.SERIF, Typeface.BOLD_ITALIC));            canvas.drawText("Number of Tries: " + tries, scrW/2, scrH*88/100, p);            p.setColor(Color.WHITE);            int index = 0;            for (int i = 0; i < nRow; i++)                for (int j = 0; j < nCol; j++) {                    canvas.drawRect((rectW * j) + cardMargin, (rectH * i) + tdMargin + cardMargin, (rectW * (j + 1)) - cardMargin, (rectH * (i + 1)) + tdMargin - cardMargin, p);                    if (myCard[index]._state == CLOSED) {                        drawable = mContext.getResources().getDrawable(R.drawable.cardback2);                        drawable.setBounds((rectW * j) + cardMargin, (rectH * i) + tdMargin + cardMargin, (rectW * (j + 1)) - cardMargin, (rectH * (i + 1)) + tdMargin - cardMargin);                        drawable.draw(canvas);                    } else if (myCard[index]._state == OPENED || isMatched == nRow * nCol) {                        drawable = mContext.getResources().getDrawable(myCard[index]._imgID);                        drawable.setBounds((rectW * j) + cardMargin, (rectH * i) + tdMargin + cardMargin, (rectW * (j + 1)) - cardMargin, (rectH * (i + 1)) + tdMargin - cardMargin);                        drawable.draw(canvas);                    }                    index++;                }            if(isMatched == nRow*nCol){                p.setColor(Color.argb(150, 0, 0, 0));                canvas.drawRoundRect(0, tdMargin, scrW, scrH*85/100, 0, 0, p);                p.setColor(Color.WHITE);                p.setTextSize(80);                canvas.drawText("You Win..\nTab to play again!", scrW/2, scrH/2+50, p);            }        }        @Override        public boolean onTouchEvent(MotionEvent event){            super.onTouchEvent(event);            if(isMatched == nRow*nCol) {                round++;                if (round == 3)                    level++;                else if (round == 5)                    level++;                else if (round == 8)                    level++;                setContentView(new PlayGameView(mContext));                return false;            }/*            GestureDetector gestureDetector = new GestureDetector(new GestureDetector.SimpleOnGestureListener() {                @Override                public void onLongPress(MotionEvent e) {                    openAll();                    isMatched = nCol*nRow;                }            });*/            int x = (int) event.getX(), y = (int) event.getY();            int col = x/rectW, row = (int) (y - scrH*0.15f)/rectH;            int card_no = row*nCol+col;            //Toast.makeText(getApplicationContext(), "X="+x+", Y="+y,Toast.LENGTH_LONG).show();            //Log.println(Log.INFO, "Touch: ", "X="+x+", Y="+y+", Col="+col+", Row="+row+", CardNo="+card_no);            if(y < scrH*0.15f || y > scrH*0.85f)  //outside                return false;            if(myCard[card_no]._state == OPENED || myCard[card_no]._state == MATCHED)                return false;            myCard[card_no]._state = OPENED;            tries++;            repaint();            if(previous == -1){                previous = card_no;            }            else{                if(myCard[card_no]._imgID == myCard[previous]._imgID){          ///Right                    myCard[card_no]._state = MATCHED;                    myCard[previous]._state = MATCHED;                    isMatched+=2;                }                else {                                                          ///Wrong                    myCard[card_no]._state = CLOSED;                    myCard[previous]._state = CLOSED;                }                previous = -1;                handler.postDelayed(new Runnable() {    //sleep 500                    @Override                    public void run() {                        repaint();                    }                }, 500);            }            return false;        }    }}