package thebird.com.memory;import android.app.Activity;import android.content.Context;import android.content.SharedPreferences;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.drawable.Drawable;import android.media.MediaPlayer;import android.os.Bundle;import android.os.Handler;import android.view.MotionEvent;import android.view.SurfaceHolder;import android.view.SurfaceView;import java.util.Random;public class PlayGame extends Activity {    static Context mContext;    static int level = 0;    static int round = 0;    final int CLOSED = 0;    final int OPENED = 1;    final int MATCHED = 2;    protected int gameType;    int[] animalImg, wordImg, alphabetImg;    SurfaceHolder holder;    Canvas canvas;    Paint p = new Paint();    Handler handler = new Handler();    Drawable drawable;    Card[] myCard;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(new PlayGameView(this));        gameType = getIntent().getIntExtra("GameType", 0);    }    protected class PlayGameView extends SurfaceView {        MediaPlayer player;        SharedPreferences prefs = getSharedPreferences(Settings.PREFS_NAME, MODE_PRIVATE);        int nRow, nCol, scrW, scrH, rectW, rectH, topMargin, bottomMargin;        int previous, tries, isMatched;        int cardMargin = 10;        int foregroundColor;        boolean isSound;        public PlayGameView(final Context context){            super(context);            player = new MediaPlayer();            PlayGame.mContext = context;            previous = -1;            tries = isMatched = 0;            foregroundColor = prefs.getInt("theme", R.color.GREY);            isSound = prefs.getBoolean("sound", false);            switch (level){                case 0:                    nCol = 3; nRow = 4;                    break;                case 1:                    nCol = 4; nRow = 5;                    break;                case 2:                    nCol = 5; nRow = 6;                    break;            }            holder = getHolder();            holder.addCallback(new SurfaceHolder.Callback() {                @Override                public void surfaceCreated(SurfaceHolder holder) {                    new Handler().post(new Runnable() {                        @Override                        public void run() {                            switch (gameType) {                                case 0:                                    animalImg = new int[]{                                            R.drawable.pic_bear, R.drawable.pic_bee, R.drawable.pic_bird,                                            R.drawable.pic_cat, R.drawable.pic_cow, R.drawable.pic_crocodile,                                            R.drawable.pic_dog, R.drawable.pic_donkey, R.drawable.pic_duck,                                            R.drawable.pic_elephant, R.drawable.pic_fish, R.drawable.pic_frog,                                            R.drawable.pic_giraffe, R.drawable.pic_hippo, R.drawable.pic_horse,                                            R.drawable.pic_koala, R.drawable.pic_lion, R.drawable.pic_monkey,                                            R.drawable.pic_mouse, R.drawable.pic_octopus, R.drawable.pic_owl,                                            R.drawable.pic_panda, R.drawable.pic_penguin, R.drawable.pic_pig,                                            R.drawable.pic_rabbit, R.drawable.pic_rooster, R.drawable.pic_sheep,                                            R.drawable.pic_snake, R.drawable.pic_tiger, R.drawable.pic_turtle,                                            R.drawable.pic_zebra                                    };                                    break;                                case 1:                                    animalImg = new int[]{                                            R.drawable.pic_bear, R.drawable.pic_bee, R.drawable.pic_bird,                                            R.drawable.pic_cat, R.drawable.pic_cow, R.drawable.pic_crocodile,                                            R.drawable.pic_dog, R.drawable.pic_donkey, R.drawable.pic_duck,                                            R.drawable.pic_elephant, R.drawable.pic_fish, R.drawable.pic_frog,                                            R.drawable.pic_giraffe, R.drawable.pic_hippo, R.drawable.pic_horse,                                            R.drawable.pic_koala, R.drawable.pic_lion, R.drawable.pic_monkey,                                            R.drawable.pic_mouse, R.drawable.pic_octopus, R.drawable.pic_owl,                                            R.drawable.pic_panda, R.drawable.pic_penguin, R.drawable.pic_pig,                                            R.drawable.pic_rabbit, R.drawable.pic_rooster, R.drawable.pic_sheep,                                            R.drawable.pic_snake, R.drawable.pic_tiger, R.drawable.pic_turtle,                                            R.drawable.pic_zebra                                    };                                    wordImg = new int[]{                                            R.drawable.word_bear, R.drawable.word_bee, R.drawable.word_bird,                                            R.drawable.word_cat, R.drawable.word_cow, R.drawable.word_crocodile,                                            R.drawable.word_dog, R.drawable.word_donkey, R.drawable.word_duck,                                            R.drawable.word_elephant, R.drawable.word_fish, R.drawable.word_frog,                                            R.drawable.word_giraffe, R.drawable.word_hippo, R.drawable.word_horse,                                            R.drawable.word_koala, R.drawable.word_lion, R.drawable.word_monkey,                                            R.drawable.word_mouse, R.drawable.word_octopus, R.drawable.word_owl,                                            R.drawable.word_panda, R.drawable.word_penguin, R.drawable.word_pig,                                            R.drawable.word_rabbit, R.drawable.word_rooster, R.drawable.word_sheep,                                            R.drawable.word_snake, R.drawable.word_tiger, R.drawable.word_turtle,                                            R.drawable.word_zebra                                    };                                    break;                                case 2:                                    alphabetImg = new int[]{                                            R.drawable.alphabet_a, R.drawable.alphabet_b, R.drawable.alphabet_c,                                            R.drawable.alphabet_d, R.drawable.alphabet_e, R.drawable.alphabet_f,                                            R.drawable.alphabet_g, R.drawable.alphabet_h, R.drawable.alphabet_i,                                            R.drawable.alphabet_j, R.drawable.alphabet_k, R.drawable.alphabet_l,                                            R.drawable.alphabet_m, R.drawable.alphabet_n, R.drawable.alphabet_o,                                            R.drawable.alphabet_p, R.drawable.alphabet_q, R.drawable.alphabet_r,                                            R.drawable.alphabet_s, R.drawable.alphabet_t, R.drawable.alphabet_u,                                            R.drawable.alphabet_v, R.drawable.alphabet_w, R.drawable.alphabet_x,                                            R.drawable.alphabet_y, R.drawable.alphabet_z                                    };                                    wordImg = new int[]{                                            R.drawable.pic_a, R.drawable.pic_b, R.drawable.pic_c,                                            R.drawable.pic_d, R.drawable.pic_e, R.drawable.pic_f,                                            R.drawable.pic_g, R.drawable.pic_h, R.drawable.pic_i,                                            R.drawable.pic_j, R.drawable.pic_k, R.drawable.pic_l,                                            R.drawable.pic_m, R.drawable.pic_n, R.drawable.pic_o,                                            R.drawable.pic_p, R.drawable.pic_q, R.drawable.pic_r,                                            R.drawable.pic_s, R.drawable.pic_t, R.drawable.pic_u,                                            R.drawable.pic_v, R.drawable.pic_w, R.drawable.pic_x,                                            R.drawable.pic_y, R.drawable.pic_z                                    };                                    break;                            }                            initCard();                        }                    });                }                @Override                public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {}                @Override                public void surfaceDestroyed(SurfaceHolder holder) { }            });        }        protected void initCard(){            Random r = new Random();            myCard = new Card[nCol * nRow];            switch (gameType) {                case 0:                    for (int i = 0; i < 50; i++) {                  // randomize the images (pic and pic)                        int rnum = r.nextInt(animalImg.length);                        int tmp = animalImg[0];                        animalImg[0] = animalImg[rnum];                        animalImg[rnum] = tmp;                    }                    for (int i = 0, j = 0; i < myCard.length; i++, j++) {    //Initialise cards (pic and pic)                        myCard[i++] = new Card(j, animalImg[j], CLOSED);                        myCard[i] = new Card(j, animalImg[j], CLOSED);                    }                    break;                case 1:                    for (int i = 0; i < 50; i++) {                  // randomize the images (word and pic)                        int rnum = r.nextInt(animalImg.length);                        int tmpPic = animalImg[0];                        animalImg[0] = animalImg[rnum];                        animalImg[rnum] = tmpPic;                        int tmpWord = wordImg[0];                        wordImg[0] = wordImg[rnum];                        wordImg[rnum] = tmpWord;                    }                    for (int i = 0, j = 0; i < myCard.length; i++, j++) {    //Initialise cards (word and pic)                        myCard[i++] = new Card(j, wordImg[j], CLOSED);                        myCard[i] = new Card(j, animalImg[j], CLOSED);                    }                    break;                case 2:                    for (int i = 0; i < 50; i++) {                  // randomize the images (alphabet and word-pic)                        int rnum = r.nextInt(alphabetImg.length);                        int tmpPic = alphabetImg[0];                        alphabetImg[0] = alphabetImg[rnum];                        alphabetImg[rnum] = tmpPic;                        int tmpWord = wordImg[0];                        wordImg[0] = wordImg[rnum];                        wordImg[rnum] = tmpWord;                    }                    for (int i = 0, j = 0; i < myCard.length; i++, j++) {    //Initialise cards (alphabet and word-pic)                        myCard[i++] = new Card(j, wordImg[j], CLOSED);                        myCard[i] = new Card(j, alphabetImg[j], CLOSED);                    }                    break;                default:                    return;            }            for (int i = 0; i < myCard.length; i++) {       //Random myCard                int rNum = r.nextInt(myCard.length);                Card tmpCard = myCard[0];                myCard[0] = myCard[rNum];                myCard[rNum] = tmpCard;            }            openAll();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    closeAll();                }            }, 2000);        }        protected void repaint(){            canvas = holder.lockCanvas();            myDraw(canvas);            drawable = mContext.getResources().getDrawable(R.drawable.bg_children);            drawable.setBounds(0, bottomMargin, scrW, scrH);            drawable.draw(canvas);            holder.unlockCanvasAndPost(canvas);        }        protected void openAll(){            for (Card aMyCard : myCard) {                aMyCard._state = OPENED;            }            repaint();        }        protected void closeAll(){            for (Card aMyCard : myCard) {                aMyCard._state = CLOSED;            }            repaint();        }        protected void myDraw(Canvas canvas) {            scrW = canvas.getWidth();            scrH = canvas.getHeight();            rectW = rectH = scrW / nCol;            topMargin = (scrH / 2) - (rectH * nRow / 2);            bottomMargin = topMargin + (rectH * nRow);            canvas.drawColor(getResources().getColor(foregroundColor));  //background            p.setColor(Color.BLACK);            p.setTextSize(170);            p.setStyle(Paint.Style.FILL_AND_STROKE);            p.setTextAlign(Paint.Align.CENTER);            p.setTypeface(MainActivity.typeface);            canvas.drawText("Number of Tries: " + tries, scrW / 2, topMargin - (scrH * 2 / 100), p);            int index = 0;            for (int i = 0; i < nRow; i++)                for (int j = 0; j < nCol; j++) {                    if (myCard[index]._state == CLOSED) {                        drawable = mContext.getResources().getDrawable(R.drawable.questionmark_card);                        drawable.setBounds((rectW * j) + cardMargin, (rectH * i) + topMargin + cardMargin, (rectW * (j + 1)) - cardMargin, (rectH * (i + 1)) + topMargin - cardMargin);                        drawable.draw(canvas);                    } else if (myCard[index]._state == OPENED || isMatched == nRow * nCol) {                        drawable = mContext.getResources().getDrawable(myCard[index]._imgID);                        drawable.setBounds((rectW * j) + cardMargin, (rectH * i) + topMargin + cardMargin, (rectW * (j + 1)) - cardMargin, (rectH * (i + 1)) + topMargin - cardMargin);                        drawable.draw(canvas);                    }                    index++;                }            if(isMatched == nRow*nCol){                p.setColor(Color.argb(200, 0, 0, 0));                canvas.drawRoundRect(0, topMargin, scrW, bottomMargin, 0, 0, p);                p.setColor(getResources().getColor(foregroundColor));                p.setTextSize(170);                canvas.drawText("You Win", scrW / 2, scrH / 2 - 50, p);                canvas.drawText("Tab to play again!", scrW / 2, scrH / 2 + 170, p);            }        }        @Override        public boolean onTouchEvent(MotionEvent event){            super.onTouchEvent(event);            if (isMatched == nRow * nCol) {       /*     WIN     */                round++;                if (round == 3)                    level++;                else if (round == 5)                    level++;                else if (round == 8)                    level++;                setContentView(new PlayGameView(mContext));                return false;            }/*            GestureDetector gestureDetector = new GestureDetector(new GestureDetector.SimpleOnGestureListener() {                @Override                public void onLongPress(MotionEvent e) {                    openAll();                    isMatched = nCol*nRow;                }            });*/            int x = (int) event.getX(), y = (int) event.getY();            int col = x / rectW, row = (y - topMargin) / rectH;            int card_no = row*nCol+col;            //Toast.makeText(getApplicationContext(), "X="+x+", Y="+y,Toast.LENGTH_LONG).show();            //Log.println(Log.INFO, "Touch: ", "X="+x+", Y="+y+", Col="+col+", Row="+row+", CardNo="+card_no);            if (y < topMargin || y > bottomMargin)  //outside                return false;            if(myCard[card_no]._state == OPENED || myCard[card_no]._state == MATCHED)                return false;            if (isSound && previous == -1) {                if (player.isPlaying()) {                    player.release();                    player = null;                }                player = MediaPlayer.create(mContext, R.raw.open);                player.start();            }            myCard[card_no]._state = OPENED;            tries++;            repaint();            if(previous == -1){                previous = card_no;            }            else{                int imgId1 = myCard[card_no]._id;                int imgId2 = myCard[previous]._id;                if (imgId1 == imgId2) {          ///Right                    myCard[card_no]._state = MATCHED;                    myCard[previous]._state = MATCHED;                    isMatched+=2;                    if (isSound) {                        if (player.isPlaying()) {                            player.release();                            player = null;                        }                        player = MediaPlayer.create(mContext, R.raw.match);                        player.start();                    }                }                else {                                                          ///Wrong                    myCard[card_no]._state = CLOSED;                    myCard[previous]._state = CLOSED;                    if (isSound) {                        if (player.isPlaying()) {                            player.release();                            player = null;                        }                        player = MediaPlayer.create(mContext, R.raw.not_match);                        player.start();                    }                }                previous = -1;                handler.postDelayed(new Runnable() {    //sleep 500                    @Override                    public void run() {                        repaint();                    }                }, 500);            }            return false;        }    }}